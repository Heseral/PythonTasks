# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import random

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt

from game.settings import UISettingsWindow
from game.help import UIHelpWindow

class UIMainWindow(object):
    def setup_ui(self, main_window):
        self.centralwidget = QtWidgets.QWidget(main_window)
        main_window.setObjectName("MainWindow")
        main_window.resize(640, 480)
        self.centralwidget.setObjectName("centralwidget")
        main_window.setCentralWidget(self.centralwidget)

        self.row = 0
        self.col = 0
        self.game_matrix = []

        self.gridLayoutWidget = QtWidgets.QWidget(main_window)
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(0, 0, 400, 400))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout.setContentsMargins(8, 16, 0, 0)
        self.gridLayout.setObjectName("gridLayout")

        self.HelpWindow = QtWidgets.QMainWindow()
        self.SettingsWindow = QtWidgets.QMainWindow()
        self.mbar_btn_exit = QtWidgets.QAction(self.centralwidget)
        self.mbar_btn_help = QtWidgets.QAction(self.centralwidget)
        self.mbar_btn_settings = QtWidgets.QAction(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(main_window)
        self.menu = QtWidgets.QMenu(self.menubar)

        self.menubar.setGeometry(QtCore.QRect(0, 0, 640, 21))
        self.menubar.setObjectName("menubar")
        self.menu.setObjectName("menu")
        main_window.setMenuBar(self.menubar)
        self.mbar_btn_settings.setObjectName("mbar_btn_settings")
        self.mbar_btn_help.setObjectName("mbar_btn_help")
        self.mbar_btn_exit.setObjectName("mbar_btn_exit")
        self.menu.addAction(self.mbar_btn_settings)
        self.menu.addAction(self.mbar_btn_help)
        self.menu.addAction(self.mbar_btn_exit)
        self.menubar.addAction(self.menu.menuAction())
        self.init_mbar(main_window)

        self.retranslate_ui(main_window)
        QtCore.QMetaObject.connectSlotsByName(main_window)

        self.init_new_game_using_difficulty("Легкий")

    def init_mbar(self, game):
        self.mbar_btn_settings.triggered.connect(lambda: self.open_settings(game))
        self.mbar_btn_help.triggered.connect(self.open_help)
        self.mbar_btn_exit.triggered.connect(self.centralwidget.close)

    def open_settings(self, game):
        ui_settings = UISettingsWindow(self)
        ui_settings.setupUi(self.SettingsWindow)
        self.SettingsWindow.show()

    def open_help(self):
        ui_help = UIHelpWindow()
        ui_help.setupUi(self.HelpWindow)
        self.HelpWindow.show()

    def retranslate_ui(self, main_window):
        _translate = QtCore.QCoreApplication.translate
        main_window.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menu.setTitle(_translate("MainWindow", "Меню"))
        self.mbar_btn_settings.setText(_translate("MainWindow", "Настройки"))
        self.mbar_btn_help.setText(_translate("MainWindow", "Помощь"))
        self.mbar_btn_exit.setText(_translate("MainWindow", "Выход"))

    def init_new_game_using_difficulty(self, difficulty_text):
        amount = 0
        self.game_matrix = []
        if difficulty_text == "Легкий":
            amount = 16
            for i in range(0, 5):
                self.game_matrix.append([])
                for j in range(0, 5):
                    self.game_matrix[i].append(0)

        elif difficulty_text == "Средний":
            amount = 32
            for i in range(0, 7):
                self.game_matrix.append([])
                for j in range(0, 7):
                    self.game_matrix[i].append(0)
        elif difficulty_text == "Сложный":
            amount = 64
            for i in range(0, 9):
                self.game_matrix.append([])
                for j in range(0, 9):
                    self.game_matrix[i].append(0)
        self.generate_random_start(amount)
        self.init_game_state()
        self.redraw_game_field()

    def generate_random_start(self, amount):
        for i in range(0, len(self.game_matrix)):
            for j in range(3, len(self.game_matrix[0])):
                self.game_matrix[i][j] = 1
        for i in range(0, amount):
            rand_row = random.randint(0, len(self.game_matrix) - 3)
            rand_col = random.randint(0, len(self.game_matrix[0]) - 3)
            self.rotate_game_section(rand_row, rand_col, 3)

    def rotate_game_section(self, row, col, length):
        section = []
        for i in range(0, length):
            section.append([])
            for j in range(0, length):
                section[i].append(self.game_matrix[row + i][col + j])
        section = tuple(zip(*section[::-1]))
        for i in range(0, len(section)):
            for j in range(0, len(section[i])):
                self.game_matrix[row + i][col + j] = section[i][j]

    def redraw_game_field(self):
        k = 0
        for i in range(0, len(self.game_matrix)):
            for j in range(0, len(self.game_matrix[i])):
                self.gridLayout.itemAt(k).widget().setText(f"<h1>{self.game_matrix[i][j]}</h1>")
                k += 1

    def init_game_state(self):
        for i in reversed(range(self.gridLayout.count())):
            self.gridLayout.itemAt(i).widget().setParent(None)
        for i in range(0, len(self.game_matrix)):
            for j in range(0, len(self.game_matrix[i])):
                self.gridLayout.addWidget(QtWidgets.QLabel("<h1>0</h1>"), i, j)

"""
class MyWindow(QtWidgets.QMainWindow, UIMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)




    def keyPressEvent(self, event):
        key = event.key()
        if key == Qt.Key_Z:
            self.rotate_game_section(self.row, self.col, 3)
        elif key == Qt.Key_Left:
            self.col = max(0, self.col - 1)
        elif key == Qt.Key_Right:
            self.col = min(len(self.game_matrix), self.col + 1)
        elif key == Qt.Key_Down:
            self.row = min(len(self.game_matrix), self.row + 1)
        elif key == Qt.Key_Up:
            self.row = max(0, self.row - 1)
"""

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    myWindow = QtWidgets.QMainWindow()
    ui = UIMainWindow()
    ui.setup_ui(myWindow)
    myWindow.show()
    sys.exit(app.exec_())
