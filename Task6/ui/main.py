# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import Qt

from game.game import Game
from ui.help import UIHelpWindow
from ui.settings import UISettingsWindow


class GameUIWindow(QtWidgets.QMainWindow):
    def __init__(self, game):
        super().__init__()
        self.game = game

    def setup_ui(self, main_window):
        self.centralwidget = QtWidgets.QWidget(main_window)
        main_window.setObjectName("MainWindow")
        main_window.resize(640, 480)
        self.centralwidget.setObjectName("centralwidget")
        main_window.setCentralWidget(self.centralwidget)

        self.gridLayoutWidget = QtWidgets.QWidget(main_window)
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(0, 0, 400, 400))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout.setContentsMargins(8, 16, 0, 0)
        self.gridLayout.setObjectName("gridLayout")

        self.HelpWindow = QtWidgets.QMainWindow()
        self.SettingsWindow = QtWidgets.QMainWindow()
        self.mbar_btn_exit = QtWidgets.QAction(self.centralwidget)
        self.mbar_btn_help = QtWidgets.QAction(self.centralwidget)
        self.mbar_btn_settings = QtWidgets.QAction(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(main_window)
        self.menu = QtWidgets.QMenu(self.menubar)

        self.menubar.setGeometry(QtCore.QRect(0, 0, 640, 21))
        self.menubar.setObjectName("menu_bar")
        self.menu.setObjectName("menu")
        main_window.setMenuBar(self.menubar)
        self.mbar_btn_settings.setObjectName("menu_bar_btn_settings")
        self.mbar_btn_help.setObjectName("menu_bar_btn_help")
        self.mbar_btn_exit.setObjectName("menu_bar_btn_exit")
        self.menu.addAction(self.mbar_btn_settings)
        self.menu.addAction(self.mbar_btn_help)
        self.menu.addAction(self.mbar_btn_exit)
        self.menubar.addAction(self.menu.menuAction())
        self.init_menu_bar()

        self.retranslate_ui(main_window)
        QtCore.QMetaObject.connectSlotsByName(main_window)

        self.init_game_state()
        self.redraw_game_field()

    def init_menu_bar(self):
        self.mbar_btn_settings.triggered.connect(self.open_settings)
        self.mbar_btn_help.triggered.connect(self.open_help)
        self.mbar_btn_exit.triggered.connect(sys.exit)

    def open_settings(self):
        ui_settings = UISettingsWindow(self)
        ui_settings.setupUi(self.SettingsWindow)
        self.SettingsWindow.show()

    def open_help(self):
        ui_help = UIHelpWindow()
        ui_help.setupUi(self.HelpWindow)
        self.HelpWindow.show()

    def retranslate_ui(self, main_window):
        _translate = QtCore.QCoreApplication.translate
        main_window.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menu.setTitle(_translate("MainWindow", "Меню"))
        self.mbar_btn_settings.setText(_translate("MainWindow", "Настройки"))
        self.mbar_btn_help.setText(_translate("MainWindow", "Помощь"))
        self.mbar_btn_exit.setText(_translate("MainWindow", "Выход"))

    def redraw_game_field(self):
        k = 0
        for i in range(0, len(self.game.game_matrix)):
            for j in range(0, len(self.game.game_matrix[i])):
                if i >= self.game.row and i - self.game.row < 3 and j >= self.game.col and j - self.game.col < 3:
                    self.gridLayout.itemAt(k).widget().setText(
                        f"<h1 style='color: rgb(255, 0, 0)'>{self.game.game_matrix[i][j]}</h1>"
                    )
                else:
                    self.gridLayout.itemAt(k).widget().setText(
                        f"<h1>{self.game.game_matrix[i][j]}</h1>"
                    )
                k += 1

    def init_game_state(self):
        for i in reversed(range(self.gridLayout.count())):
            self.gridLayout.itemAt(i).widget().setParent(None)
        for i in range(0, len(self.game.game_matrix)):
            for j in range(0, len(self.game.game_matrix[i])):
                self.gridLayout.addWidget(QtWidgets.QLabel("<h1>0</h1>"), i, j)

    def keyPressEvent(self, event):
        key = event.key()
        if key == Qt.Key_Z:
            self.game.rotate_game_section(self.game.row, self.game.col, self.game.length)
        elif key == Qt.Key_Left:
            self.game.try_to_move_to_pos(self.game.row, self.game.col - 1)
        elif key == Qt.Key_Right:
            self.game.try_to_move_to_pos(self.game.row, self.game.col + 1)
        elif key == Qt.Key_Down:
            self.game.try_to_move_to_pos(self.game.row + 1, self.game.col)
        elif key == Qt.Key_Up:
            self.game.try_to_move_to_pos(self.game.row - 1, self.game.col)
        self.redraw_game_field()

    def set_difficulty_and_restart_game(self, difficulty):
        self.game.init_new_game_using_difficulty(difficulty)
        self.init_game_state()
        self.redraw_game_field()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    myWindow = GameUIWindow(Game())
    myWindow.setup_ui(myWindow)
    myWindow.show()
    sys.exit(app.exec_())
